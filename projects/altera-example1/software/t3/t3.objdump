
t3.elf:     file format elf32-littlenios2
t3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00002000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000234 memsz 0x00000234 flags r-x
    LOAD off    0x00002234 vaddr 0x02000234 paddr 0x02000238 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000223c vaddr 0x0200023c paddr 0x0200023c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00002238  2**0
                  CONTENTS
  2 .text         0000021c  02000000  02000000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0200021c  0200021c  0000221c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  02000234  02000238  00002234  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0200023c  0200023c  0000223c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  00000020  00000020  00002238  2**0
                  CONTENTS
  7 .sdram        00000000  02000248  02000248  00002238  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000168  00000000  00000000  00002260  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00000ae3  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000630  00000000  00000000  00002eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000716  00000000  00000000  000034db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000190  00000000  00000000  00003bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000005bb  00000000  00000000  00003d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000101  00000000  00000000  0000433f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00004440  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000088  00000000  00000000  00004450  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00005336  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00005339  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00005345  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00005346  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00005347  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0000534b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0000534f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00005353  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0000535c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00005365  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0000536e  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  00005377  2**0
                  CONTENTS, READONLY
 30 .jdi          000064ab  00000000  00000000  000053a9  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00039126  00000000  00000000  0000b854  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
02000000 l    d  .text	00000000 .text
0200021c l    d  .rodata	00000000 .rodata
02000234 l    d  .rwdata	00000000 .rwdata
0200023c l    d  .bss	00000000 .bss
00000020 l    d  .onchip_ram	00000000 .onchip_ram
02000248 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../t3_bsp//obj/HAL/src/crt0.o
02000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
02000134 g     F .text	0000002c alt_main
02000238 g       *ABS*	00000000 __flash_rwdata_start
02000160 g     F .text	00000038 alt_putstr
02000234 g     O .rwdata	00000004 jtag_uart
020001f8 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
02000000 g       *ABS*	00000000 __flash_exceptions_start
02000240 g     O .bss	00000004 alt_argv
02008234 g       *ABS*	00000000 _gp
02000248 g       *ABS*	00000000 __bss_end
020001f0 g     F .text	00000004 alt_dcache_flush_all
02000238 g       *ABS*	00000000 __ram_rwdata_end
02000234 g       *ABS*	00000000 __ram_rodata_end
02000248 g       *ABS*	00000000 end
04000000 g       *ABS*	00000000 __alt_stack_pointer
020001bc g     F .text	00000034 altera_avalon_jtag_uart_write
02000000 g     F .text	0000003c _start
020001b8 g     F .text	00000004 alt_sys_init
02000234 g       *ABS*	00000000 __ram_rwdata_start
0200021c g       *ABS*	00000000 __ram_rodata_start
02000248 g       *ABS*	00000000 __alt_stack_base
0200023c g       *ABS*	00000000 __bss_start
0200003c g     F .text	00000018 main
0200023c g     O .bss	00000004 alt_envp
0200021c g       *ABS*	00000000 __flash_rodata_start
02000198 g     F .text	00000020 alt_irq_init
02000244 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
02000238 g       *ABS*	00000000 _edata
02000248 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
04000000 g       *ABS*	00000000 __alt_data_end
02000000 g       *ABS*	00000000 __alt_mem_sdram
00000000 g       *ABS*	00000000 __alt_mem_onchip_ram
0000000c g       .entry	00000000 _exit
02000200 g     F .text	0000001c strlen
020001f4 g     F .text	00000004 alt_icache_flush_all
02000054 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
   4:	08400014 	ori	at,at,0
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

02000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000000:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000008:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 200000c:	d6a08d14 	ori	gp,gp,33332
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000010:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 2000014:	10808f14 	ori	r2,r2,572

    movhi r3, %hi(__bss_end)
 2000018:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 200001c:	18c09214 	ori	r3,r3,584

    beq r2, r3, 1f
 2000020:	10c00326 	beq	r2,r3,2000030 <_start+0x30>

0:
    stw zero, (r2)
 2000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200002c:	10fffd36 	bltu	r2,r3,2000024 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000030:	20000540 	call	2000054 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000034:	20001340 	call	2000134 <alt_main>

02000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000038:	003fff06 	br	2000038 <alt_after_alt_main>

0200003c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
 200003c:	01008034 	movhi	r4,512
 */

#include "sys/alt_stdio.h"

int main()
{ 
 2000040:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
 2000044:	21008704 	addi	r4,r4,540
 */

#include "sys/alt_stdio.h"

int main()
{ 
 2000048:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
 200004c:	20001600 	call	2000160 <alt_putstr>
 2000050:	003fff06 	br	2000050 <main+0x14>

02000054 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2000054:	deffff04 	addi	sp,sp,-4
 2000058:	01008034 	movhi	r4,512
 200005c:	01408034 	movhi	r5,512
 2000060:	dfc00015 	stw	ra,0(sp)
 2000064:	21008d04 	addi	r4,r4,564
 2000068:	29408e04 	addi	r5,r5,568

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 200006c:	2140061e 	bne	r4,r5,2000088 <alt_load+0x34>
 2000070:	01000034 	movhi	r4,0
 2000074:	01408034 	movhi	r5,512
 2000078:	21000804 	addi	r4,r4,32
 200007c:	29400004 	addi	r5,r5,0
 2000080:	2140121e 	bne	r4,r5,20000cc <alt_load+0x78>
 2000084:	00000b06 	br	20000b4 <alt_load+0x60>
 2000088:	00c08034 	movhi	r3,512
 200008c:	18c08e04 	addi	r3,r3,568
 2000090:	1907c83a 	sub	r3,r3,r4
 2000094:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2000098:	10fff526 	beq	r2,r3,2000070 <alt_load+0x1c>
    {
      *to++ = *from++;
 200009c:	114f883a 	add	r7,r2,r5
 20000a0:	39c00017 	ldw	r7,0(r7)
 20000a4:	110d883a 	add	r6,r2,r4
 20000a8:	10800104 	addi	r2,r2,4
 20000ac:	31c00015 	stw	r7,0(r6)
 20000b0:	003ff906 	br	2000098 <alt_load+0x44>
 20000b4:	01008034 	movhi	r4,512
 20000b8:	01408034 	movhi	r5,512
 20000bc:	21008704 	addi	r4,r4,540
 20000c0:	29408704 	addi	r5,r5,540

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 20000c4:	2140101e 	bne	r4,r5,2000108 <alt_load+0xb4>
 20000c8:	00000b06 	br	20000f8 <alt_load+0xa4>
 20000cc:	00c00034 	movhi	r3,0
 20000d0:	18c00804 	addi	r3,r3,32
 20000d4:	1907c83a 	sub	r3,r3,r4
 20000d8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 20000dc:	10fff526 	beq	r2,r3,20000b4 <alt_load+0x60>
    {
      *to++ = *from++;
 20000e0:	114f883a 	add	r7,r2,r5
 20000e4:	39c00017 	ldw	r7,0(r7)
 20000e8:	110d883a 	add	r6,r2,r4
 20000ec:	10800104 	addi	r2,r2,4
 20000f0:	31c00015 	stw	r7,0(r6)
 20000f4:	003ff906 	br	20000dc <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20000f8:	20001f00 	call	20001f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 20000fc:	dfc00017 	ldw	ra,0(sp)
 2000100:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 2000104:	20001f41 	jmpi	20001f4 <alt_icache_flush_all>
 2000108:	00c08034 	movhi	r3,512
 200010c:	18c08d04 	addi	r3,r3,564
 2000110:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2000114:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2000118:	18bff726 	beq	r3,r2,20000f8 <alt_load+0xa4>
    {
      *to++ = *from++;
 200011c:	114f883a 	add	r7,r2,r5
 2000120:	39c00017 	ldw	r7,0(r7)
 2000124:	110d883a 	add	r6,r2,r4
 2000128:	10800104 	addi	r2,r2,4
 200012c:	31c00015 	stw	r7,0(r6)
 2000130:	003ff906 	br	2000118 <alt_load+0xc4>

02000134 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2000134:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2000138:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200013c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2000140:	20001980 	call	2000198 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2000144:	20001b80 	call	20001b8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2000148:	d1a00217 	ldw	r6,-32760(gp)
 200014c:	d1600317 	ldw	r5,-32756(gp)
 2000150:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 2000154:	dfc00017 	ldw	ra,0(sp)
 2000158:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 200015c:	200003c1 	jmpi	200003c <main>

02000160 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 2000160:	defffe04 	addi	sp,sp,-8
 2000164:	dc000015 	stw	r16,0(sp)
 2000168:	dfc00115 	stw	ra,4(sp)
 200016c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 2000170:	20002000 	call	2000200 <strlen>
 2000174:	01008034 	movhi	r4,512
 2000178:	000f883a 	mov	r7,zero
 200017c:	100d883a 	mov	r6,r2
 2000180:	800b883a 	mov	r5,r16
 2000184:	21008d04 	addi	r4,r4,564
#else
    return fputs(str, stdout);
#endif
#endif
}
 2000188:	dfc00117 	ldw	ra,4(sp)
 200018c:	dc000017 	ldw	r16,0(sp)
 2000190:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 2000194:	20001bc1 	jmpi	20001bc <altera_avalon_jtag_uart_write>

02000198 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2000198:	deffff04 	addi	sp,sp,-4
 200019c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 20001a0:	20001f80 	call	20001f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 20001a4:	00800044 	movi	r2,1
 20001a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20001ac:	dfc00017 	ldw	ra,0(sp)
 20001b0:	dec00104 	addi	sp,sp,4
 20001b4:	f800283a 	ret

020001b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20001b8:	f800283a 	ret

020001bc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 20001bc:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20001c0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 20001c4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 20001c8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 20001cc:	2980072e 	bgeu	r5,r6,20001ec <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 20001d0:	38c00037 	ldwio	r3,0(r7)
 20001d4:	18ffffec 	andhi	r3,r3,65535
 20001d8:	183ffc26 	beq	r3,zero,20001cc <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 20001dc:	28c00007 	ldb	r3,0(r5)
 20001e0:	20c00035 	stwio	r3,0(r4)
 20001e4:	29400044 	addi	r5,r5,1
 20001e8:	003ff806 	br	20001cc <altera_avalon_jtag_uart_write+0x10>

  return count;
}
 20001ec:	f800283a 	ret

020001f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 20001f0:	f800283a 	ret

020001f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 20001f4:	f800283a 	ret

020001f8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 20001f8:	000170fa 	wrctl	ienable,zero
 20001fc:	f800283a 	ret

02000200 <strlen>:
 2000200:	2005883a 	mov	r2,r4
 2000204:	10c00007 	ldb	r3,0(r2)
 2000208:	18000226 	beq	r3,zero,2000214 <strlen+0x14>
 200020c:	10800044 	addi	r2,r2,1
 2000210:	003ffc06 	br	2000204 <strlen+0x4>
 2000214:	1105c83a 	sub	r2,r2,r4
 2000218:	f800283a 	ret
