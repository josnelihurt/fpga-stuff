
t1.elf:     file format elf32-littlenios2
t1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000042c memsz 0x0000042c flags r-x
    LOAD off    0x00002000 vaddr 0x02000000 paddr 0x0000044c align 2**12
         filesz 0x0000011c memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  0000211c  2**0
                  CONTENTS
  2 .text         0000042c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  02000000  0000044c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  0200002c  00000478  0000202c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  0200011c  00000568  0000211c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  00000568  00000568  0000211c  2**0
                  CONTENTS
  7 .sdram        00000000  0200012c  0200012c  0000211c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000238  00000000  00000000  00002140  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00002699  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000ecd  00000000  00000000  00004a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001086  00000000  00000000  000058de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000294  00000000  00000000  00006964  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000b66  00000000  00000000  00006bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000041c  00000000  00000000  0000775e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00007b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000f8  00000000  00000000  00007b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00008c9a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00008c9d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00008ca9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00008caa  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00008cab  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00008caf  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00008cb3  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00008cb7  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00008cc0  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00008cc9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  00008cd2  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  00008cdb  2**0
                  CONTENTS, READONLY
 30 .jdi          000064ab  00000000  00000000  00008d0d  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000389fd  00000000  00000000  0000f1b8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
02000000 l    d  .rodata	00000000 .rodata
0200002c l    d  .rwdata	00000000 .rwdata
0200011c l    d  .bss	00000000 .bss
00000568 l    d  .onchip_ram	00000000 .onchip_ram
0200012c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../t1_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0200002c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000320 g     F .text	0000002c alt_main
00000080 g     F .text	00000080 _puts_r
00000478 g       *ABS*	00000000 __flash_rwdata_start
0000034c g     F .text	00000038 alt_putstr
02000114 g     O .rwdata	00000004 jtag_uart
00000444 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0200011c g     O .bss	00000004 errno
02000124 g     O .bss	00000004 alt_argv
0200810c g       *ABS*	00000000 _gp
00000100 g     F .text	00000014 puts
0200010c g     O .rwdata	00000004 _global_impure_ptr
0200012c g       *ABS*	00000000 __bss_end
0000043c g     F .text	00000004 alt_dcache_flush_all
0200011c g       *ABS*	00000000 __ram_rwdata_end
00000384 g     F .text	00000060 write
0200002c g       *ABS*	00000000 __ram_rodata_end
0200012c g       *ABS*	00000000 end
04000000 g       *ABS*	00000000 __alt_stack_pointer
00000408 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
00000404 g     F .text	00000004 alt_sys_init
0200002c g       *ABS*	00000000 __ram_rwdata_start
02000000 g       *ABS*	00000000 __ram_rodata_start
0200012c g       *ABS*	00000000 __alt_stack_base
00000130 g     F .text	000000b8 __sfvwrite_small_dev
0200011c g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000024 main
02000120 g     O .bss	00000004 alt_envp
02000118 g     O .rwdata	00000004 alt_errno
0000044c g       *ABS*	00000000 __flash_rodata_start
000003e4 g     F .text	00000020 alt_irq_init
000001e8 g     F .text	00000058 _write_r
02000110 g     O .rwdata	00000004 _impure_ptr
02000128 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0200011c g       *ABS*	00000000 _edata
0200012c g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
04000000 g       *ABS*	00000000 __alt_data_end
02000000 g       *ABS*	00000000 __alt_mem_sdram
00000000 g       *ABS*	00000000 __alt_mem_onchip_ram
0000000c g       .entry	00000000 _exit
00000114 g     F .text	0000001c strlen
00000440 g     F .text	00000004 alt_icache_flush_all
00000240 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  28:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
  2c:	d6a04314 	ori	gp,gp,33036
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
  34:	10804714 	ori	r2,r2,284

    movhi r3, %hi(__bss_end)
  38:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
  3c:	18c04b14 	ori	r3,r3,300

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00002400 	call	240 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00003200 	call	320 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  5c:	01008034 	movhi	r4,512
 */

#include "sys/alt_stdio.h"

int main()
{ 
  60:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
  64:	21000004 	addi	r4,r4,0
 */

#include "sys/alt_stdio.h"

int main()
{ 
  68:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
  6c:	000034c0 	call	34c <alt_putstr>
  printf("printf test!\n");
  70:	01008034 	movhi	r4,512
  74:	21000604 	addi	r4,r4,24
  78:	00001000 	call	100 <puts>
  7c:	003fff06 	br	7c <main+0x20>

00000080 <_puts_r>:
  80:	defffd04 	addi	sp,sp,-12
  84:	dc000015 	stw	r16,0(sp)
  88:	2021883a 	mov	r16,r4
  8c:	2809883a 	mov	r4,r5
  90:	dfc00215 	stw	ra,8(sp)
  94:	dc400115 	stw	r17,4(sp)
  98:	2823883a 	mov	r17,r5
  9c:	00001140 	call	114 <strlen>
  a0:	81400217 	ldw	r5,8(r16)
  a4:	01000034 	movhi	r4,0
  a8:	21004c04 	addi	r4,r4,304
  ac:	29000115 	stw	r4,4(r5)
  b0:	100f883a 	mov	r7,r2
  b4:	880d883a 	mov	r6,r17
  b8:	8009883a 	mov	r4,r16
  bc:	00001300 	call	130 <__sfvwrite_small_dev>
  c0:	00ffffc4 	movi	r3,-1
  c4:	10c00926 	beq	r2,r3,ec <_puts_r+0x6c>
  c8:	81400217 	ldw	r5,8(r16)
  cc:	01808034 	movhi	r6,512
  d0:	01c00044 	movi	r7,1
  d4:	28800117 	ldw	r2,4(r5)
  d8:	31800a04 	addi	r6,r6,40
  dc:	8009883a 	mov	r4,r16
  e0:	103ee83a 	callr	r2
  e4:	10bfffe0 	cmpeqi	r2,r2,-1
  e8:	0085c83a 	sub	r2,zero,r2
  ec:	dfc00217 	ldw	ra,8(sp)
  f0:	dc400117 	ldw	r17,4(sp)
  f4:	dc000017 	ldw	r16,0(sp)
  f8:	dec00304 	addi	sp,sp,12
  fc:	f800283a 	ret

00000100 <puts>:
 100:	00808034 	movhi	r2,512
 104:	10804404 	addi	r2,r2,272
 108:	200b883a 	mov	r5,r4
 10c:	11000017 	ldw	r4,0(r2)
 110:	00000801 	jmpi	80 <_puts_r>

00000114 <strlen>:
 114:	2005883a 	mov	r2,r4
 118:	10c00007 	ldb	r3,0(r2)
 11c:	18000226 	beq	r3,zero,128 <strlen+0x14>
 120:	10800044 	addi	r2,r2,1
 124:	003ffc06 	br	118 <strlen+0x4>
 128:	1105c83a 	sub	r2,r2,r4
 12c:	f800283a 	ret

00000130 <__sfvwrite_small_dev>:
 130:	2880000b 	ldhu	r2,0(r5)
 134:	1080020c 	andi	r2,r2,8
 138:	10002126 	beq	r2,zero,1c0 <__sfvwrite_small_dev+0x90>
 13c:	2880008f 	ldh	r2,2(r5)
 140:	defffa04 	addi	sp,sp,-24
 144:	dc000015 	stw	r16,0(sp)
 148:	dfc00515 	stw	ra,20(sp)
 14c:	dd000415 	stw	r20,16(sp)
 150:	dcc00315 	stw	r19,12(sp)
 154:	dc800215 	stw	r18,8(sp)
 158:	dc400115 	stw	r17,4(sp)
 15c:	2821883a 	mov	r16,r5
 160:	10001216 	blt	r2,zero,1ac <__sfvwrite_small_dev+0x7c>
 164:	2027883a 	mov	r19,r4
 168:	3025883a 	mov	r18,r6
 16c:	3823883a 	mov	r17,r7
 170:	05010004 	movi	r20,1024
 174:	04400b0e 	bge	zero,r17,1a4 <__sfvwrite_small_dev+0x74>
 178:	880f883a 	mov	r7,r17
 17c:	a440010e 	bge	r20,r17,184 <__sfvwrite_small_dev+0x54>
 180:	01c10004 	movi	r7,1024
 184:	8140008f 	ldh	r5,2(r16)
 188:	900d883a 	mov	r6,r18
 18c:	9809883a 	mov	r4,r19
 190:	00001e80 	call	1e8 <_write_r>
 194:	0080050e 	bge	zero,r2,1ac <__sfvwrite_small_dev+0x7c>
 198:	88a3c83a 	sub	r17,r17,r2
 19c:	90a5883a 	add	r18,r18,r2
 1a0:	003ff406 	br	174 <__sfvwrite_small_dev+0x44>
 1a4:	0005883a 	mov	r2,zero
 1a8:	00000706 	br	1c8 <__sfvwrite_small_dev+0x98>
 1ac:	8080000b 	ldhu	r2,0(r16)
 1b0:	10801014 	ori	r2,r2,64
 1b4:	8080000d 	sth	r2,0(r16)
 1b8:	00bfffc4 	movi	r2,-1
 1bc:	00000206 	br	1c8 <__sfvwrite_small_dev+0x98>
 1c0:	00bfffc4 	movi	r2,-1
 1c4:	f800283a 	ret
 1c8:	dfc00517 	ldw	ra,20(sp)
 1cc:	dd000417 	ldw	r20,16(sp)
 1d0:	dcc00317 	ldw	r19,12(sp)
 1d4:	dc800217 	ldw	r18,8(sp)
 1d8:	dc400117 	ldw	r17,4(sp)
 1dc:	dc000017 	ldw	r16,0(sp)
 1e0:	dec00604 	addi	sp,sp,24
 1e4:	f800283a 	ret

000001e8 <_write_r>:
 1e8:	defffd04 	addi	sp,sp,-12
 1ec:	dc000015 	stw	r16,0(sp)
 1f0:	04008034 	movhi	r16,512
 1f4:	dc400115 	stw	r17,4(sp)
 1f8:	84004704 	addi	r16,r16,284
 1fc:	2023883a 	mov	r17,r4
 200:	2809883a 	mov	r4,r5
 204:	300b883a 	mov	r5,r6
 208:	380d883a 	mov	r6,r7
 20c:	dfc00215 	stw	ra,8(sp)
 210:	80000015 	stw	zero,0(r16)
 214:	00003840 	call	384 <write>
 218:	00ffffc4 	movi	r3,-1
 21c:	10c0031e 	bne	r2,r3,22c <_write_r+0x44>
 220:	80c00017 	ldw	r3,0(r16)
 224:	18000126 	beq	r3,zero,22c <_write_r+0x44>
 228:	88c00015 	stw	r3,0(r17)
 22c:	dfc00217 	ldw	ra,8(sp)
 230:	dc400117 	ldw	r17,4(sp)
 234:	dc000017 	ldw	r16,0(sp)
 238:	dec00304 	addi	sp,sp,12
 23c:	f800283a 	ret

00000240 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 240:	deffff04 	addi	sp,sp,-4
 244:	01008034 	movhi	r4,512
 248:	01400034 	movhi	r5,0
 24c:	dfc00015 	stw	ra,0(sp)
 250:	21000b04 	addi	r4,r4,44
 254:	29411e04 	addi	r5,r5,1144

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 258:	2140061e 	bne	r4,r5,274 <alt_load+0x34>
 25c:	01000034 	movhi	r4,0
 260:	01400034 	movhi	r5,0
 264:	21000804 	addi	r4,r4,32
 268:	29400804 	addi	r5,r5,32
 26c:	2140121e 	bne	r4,r5,2b8 <alt_load+0x78>
 270:	00000b06 	br	2a0 <alt_load+0x60>
 274:	00c08034 	movhi	r3,512
 278:	18c04704 	addi	r3,r3,284
 27c:	1907c83a 	sub	r3,r3,r4
 280:	0005883a 	mov	r2,zero
  {
    while( to != end )
 284:	10fff526 	beq	r2,r3,25c <alt_load+0x1c>
    {
      *to++ = *from++;
 288:	114f883a 	add	r7,r2,r5
 28c:	39c00017 	ldw	r7,0(r7)
 290:	110d883a 	add	r6,r2,r4
 294:	10800104 	addi	r2,r2,4
 298:	31c00015 	stw	r7,0(r6)
 29c:	003ff906 	br	284 <alt_load+0x44>
 2a0:	01008034 	movhi	r4,512
 2a4:	01400034 	movhi	r5,0
 2a8:	21000004 	addi	r4,r4,0
 2ac:	29411304 	addi	r5,r5,1100

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2b0:	2140101e 	bne	r4,r5,2f4 <alt_load+0xb4>
 2b4:	00000b06 	br	2e4 <alt_load+0xa4>
 2b8:	00c00034 	movhi	r3,0
 2bc:	18c00804 	addi	r3,r3,32
 2c0:	1907c83a 	sub	r3,r3,r4
 2c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2c8:	10fff526 	beq	r2,r3,2a0 <alt_load+0x60>
    {
      *to++ = *from++;
 2cc:	114f883a 	add	r7,r2,r5
 2d0:	39c00017 	ldw	r7,0(r7)
 2d4:	110d883a 	add	r6,r2,r4
 2d8:	10800104 	addi	r2,r2,4
 2dc:	31c00015 	stw	r7,0(r6)
 2e0:	003ff906 	br	2c8 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2e4:	000043c0 	call	43c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 2e8:	dfc00017 	ldw	ra,0(sp)
 2ec:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 2f0:	00004401 	jmpi	440 <alt_icache_flush_all>
 2f4:	00c08034 	movhi	r3,512
 2f8:	18c00b04 	addi	r3,r3,44
 2fc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 300:	0005883a 	mov	r2,zero
  {
    while( to != end )
 304:	18bff726 	beq	r3,r2,2e4 <alt_load+0xa4>
    {
      *to++ = *from++;
 308:	114f883a 	add	r7,r2,r5
 30c:	39c00017 	ldw	r7,0(r7)
 310:	110d883a 	add	r6,r2,r4
 314:	10800104 	addi	r2,r2,4
 318:	31c00015 	stw	r7,0(r6)
 31c:	003ff906 	br	304 <alt_load+0xc4>

00000320 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 320:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 324:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 328:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 32c:	00003e40 	call	3e4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 330:	00004040 	call	404 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 334:	d1a00517 	ldw	r6,-32748(gp)
 338:	d1600617 	ldw	r5,-32744(gp)
 33c:	d1200717 	ldw	r4,-32740(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 340:	dfc00017 	ldw	ra,0(sp)
 344:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 348:	000005c1 	jmpi	5c <main>

0000034c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 34c:	defffe04 	addi	sp,sp,-8
 350:	dc000015 	stw	r16,0(sp)
 354:	dfc00115 	stw	ra,4(sp)
 358:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 35c:	00001140 	call	114 <strlen>
 360:	01008034 	movhi	r4,512
 364:	000f883a 	mov	r7,zero
 368:	100d883a 	mov	r6,r2
 36c:	800b883a 	mov	r5,r16
 370:	21004504 	addi	r4,r4,276
#else
    return fputs(str, stdout);
#endif
#endif
}
 374:	dfc00117 	ldw	ra,4(sp)
 378:	dc000017 	ldw	r16,0(sp)
 37c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 380:	00004081 	jmpi	408 <altera_avalon_jtag_uart_write>

00000384 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 384:	00800044 	movi	r2,1
 388:	20800226 	beq	r4,r2,394 <write+0x10>
 38c:	00800084 	movi	r2,2
 390:	2080041e 	bne	r4,r2,3a4 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 394:	01008034 	movhi	r4,512
 398:	000f883a 	mov	r7,zero
 39c:	21004504 	addi	r4,r4,276
 3a0:	00004081 	jmpi	408 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 3a4:	d0a00317 	ldw	r2,-32756(gp)
 3a8:	10000926 	beq	r2,zero,3d0 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 3ac:	deffff04 	addi	sp,sp,-4
 3b0:	dfc00015 	stw	ra,0(sp)
 3b4:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 3b8:	00c01444 	movi	r3,81
 3bc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 3c0:	00bfffc4 	movi	r2,-1
 3c4:	dfc00017 	ldw	ra,0(sp)
 3c8:	dec00104 	addi	sp,sp,4
 3cc:	f800283a 	ret
 3d0:	d0a00404 	addi	r2,gp,-32752
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 3d4:	00c01444 	movi	r3,81
 3d8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 3dc:	00bfffc4 	movi	r2,-1
 3e0:	f800283a 	ret

000003e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 3e4:	deffff04 	addi	sp,sp,-4
 3e8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 3ec:	00004440 	call	444 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 3f0:	00800044 	movi	r2,1
 3f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 3f8:	dfc00017 	ldw	ra,0(sp)
 3fc:	dec00104 	addi	sp,sp,4
 400:	f800283a 	ret

00000404 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 404:	f800283a 	ret

00000408 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 408:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 410:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 414:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 418:	2980072e 	bgeu	r5,r6,438 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 41c:	38c00037 	ldwio	r3,0(r7)
 420:	18ffffec 	andhi	r3,r3,65535
 424:	183ffc26 	beq	r3,zero,418 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 428:	28c00007 	ldb	r3,0(r5)
 42c:	20c00035 	stwio	r3,0(r4)
 430:	29400044 	addi	r5,r5,1
 434:	003ff806 	br	418 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
 438:	f800283a 	ret

0000043c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 43c:	f800283a 	ret

00000440 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 440:	f800283a 	ret

00000444 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 444:	000170fa 	wrctl	ienable,zero
 448:	f800283a 	ret
