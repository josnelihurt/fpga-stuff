// mysystem.v

// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module mysystem (
		input  wire       clk_clk,              //           clk.clk
		input  wire       reset_reset_n,        //         reset.reset_n
		inout  wire       oc_iic_scl_pad_io,    //        oc_iic.scl_pad_io
		inout  wire       oc_iic_sda_pad_io,    //              .sda_pad_io
		input  wire       uart_0_rxd,           //        uart_0.rxd
		output wire       uart_0_txd,           //              .txd
		input  wire [1:0] pio_key_export,       //       pio_key.export
		output wire [3:0] pio_led_export,       //       pio_led.export
		output wire       pio_reset_out_export  // pio_reset_out.export
	);

	wire  [31:0] nios2_data_master_readdata;                            // mm_interconnect_0:nios2_data_master_readdata -> nios2:d_readdata
	wire         nios2_data_master_waitrequest;                         // mm_interconnect_0:nios2_data_master_waitrequest -> nios2:d_waitrequest
	wire         nios2_data_master_debugaccess;                         // nios2:jtag_debug_module_debugaccess_to_roms -> mm_interconnect_0:nios2_data_master_debugaccess
	wire  [14:0] nios2_data_master_address;                             // nios2:d_address -> mm_interconnect_0:nios2_data_master_address
	wire   [3:0] nios2_data_master_byteenable;                          // nios2:d_byteenable -> mm_interconnect_0:nios2_data_master_byteenable
	wire         nios2_data_master_read;                                // nios2:d_read -> mm_interconnect_0:nios2_data_master_read
	wire         nios2_data_master_write;                               // nios2:d_write -> mm_interconnect_0:nios2_data_master_write
	wire  [31:0] nios2_data_master_writedata;                           // nios2:d_writedata -> mm_interconnect_0:nios2_data_master_writedata
	wire  [31:0] nios2_instruction_master_readdata;                     // mm_interconnect_0:nios2_instruction_master_readdata -> nios2:i_readdata
	wire         nios2_instruction_master_waitrequest;                  // mm_interconnect_0:nios2_instruction_master_waitrequest -> nios2:i_waitrequest
	wire  [14:0] nios2_instruction_master_address;                      // nios2:i_address -> mm_interconnect_0:nios2_instruction_master_address
	wire         nios2_instruction_master_read;                         // nios2:i_read -> mm_interconnect_0:nios2_instruction_master_read
	wire         mm_interconnect_0_onchip_s1_chipselect;                // mm_interconnect_0:onchip_s1_chipselect -> onchip:chipselect
	wire  [31:0] mm_interconnect_0_onchip_s1_readdata;                  // onchip:readdata -> mm_interconnect_0:onchip_s1_readdata
	wire  [10:0] mm_interconnect_0_onchip_s1_address;                   // mm_interconnect_0:onchip_s1_address -> onchip:address
	wire   [3:0] mm_interconnect_0_onchip_s1_byteenable;                // mm_interconnect_0:onchip_s1_byteenable -> onchip:byteenable
	wire         mm_interconnect_0_onchip_s1_write;                     // mm_interconnect_0:onchip_s1_write -> onchip:write
	wire  [31:0] mm_interconnect_0_onchip_s1_writedata;                 // mm_interconnect_0:onchip_s1_writedata -> onchip:writedata
	wire         mm_interconnect_0_onchip_s1_clken;                     // mm_interconnect_0:onchip_s1_clken -> onchip:clken
	wire         mm_interconnect_0_oc_iic_0_av_chipselect;              // mm_interconnect_0:oc_iic_0_av_chipselect -> oc_iic_0:av_chipselect
	wire   [7:0] mm_interconnect_0_oc_iic_0_av_readdata;                // oc_iic_0:av_readdata -> mm_interconnect_0:oc_iic_0_av_readdata
	wire         mm_interconnect_0_oc_iic_0_av_waitrequest;             // oc_iic_0:av_waitrequest_n -> mm_interconnect_0:oc_iic_0_av_waitrequest
	wire   [2:0] mm_interconnect_0_oc_iic_0_av_address;                 // mm_interconnect_0:oc_iic_0_av_address -> oc_iic_0:av_address
	wire         mm_interconnect_0_oc_iic_0_av_read;                    // mm_interconnect_0:oc_iic_0_av_read -> oc_iic_0:av_read
	wire         mm_interconnect_0_oc_iic_0_av_write;                   // mm_interconnect_0:oc_iic_0_av_write -> oc_iic_0:av_write
	wire   [7:0] mm_interconnect_0_oc_iic_0_av_writedata;               // mm_interconnect_0:oc_iic_0_av_writedata -> oc_iic_0:av_writedata
	wire         mm_interconnect_0_uart_0_s1_chipselect;                // mm_interconnect_0:uart_0_s1_chipselect -> uart_0:chipselect
	wire  [15:0] mm_interconnect_0_uart_0_s1_readdata;                  // uart_0:readdata -> mm_interconnect_0:uart_0_s1_readdata
	wire   [2:0] mm_interconnect_0_uart_0_s1_address;                   // mm_interconnect_0:uart_0_s1_address -> uart_0:address
	wire         mm_interconnect_0_uart_0_s1_read;                      // mm_interconnect_0:uart_0_s1_read -> uart_0:read_n
	wire         mm_interconnect_0_uart_0_s1_begintransfer;             // mm_interconnect_0:uart_0_s1_begintransfer -> uart_0:begintransfer
	wire         mm_interconnect_0_uart_0_s1_write;                     // mm_interconnect_0:uart_0_s1_write -> uart_0:write_n
	wire  [15:0] mm_interconnect_0_uart_0_s1_writedata;                 // mm_interconnect_0:uart_0_s1_writedata -> uart_0:writedata
	wire  [31:0] mm_interconnect_0_nios2_jtag_debug_module_readdata;    // nios2:jtag_debug_module_readdata -> mm_interconnect_0:nios2_jtag_debug_module_readdata
	wire         mm_interconnect_0_nios2_jtag_debug_module_waitrequest; // nios2:jtag_debug_module_waitrequest -> mm_interconnect_0:nios2_jtag_debug_module_waitrequest
	wire         mm_interconnect_0_nios2_jtag_debug_module_debugaccess; // mm_interconnect_0:nios2_jtag_debug_module_debugaccess -> nios2:jtag_debug_module_debugaccess
	wire   [8:0] mm_interconnect_0_nios2_jtag_debug_module_address;     // mm_interconnect_0:nios2_jtag_debug_module_address -> nios2:jtag_debug_module_address
	wire         mm_interconnect_0_nios2_jtag_debug_module_read;        // mm_interconnect_0:nios2_jtag_debug_module_read -> nios2:jtag_debug_module_read
	wire   [3:0] mm_interconnect_0_nios2_jtag_debug_module_byteenable;  // mm_interconnect_0:nios2_jtag_debug_module_byteenable -> nios2:jtag_debug_module_byteenable
	wire         mm_interconnect_0_nios2_jtag_debug_module_write;       // mm_interconnect_0:nios2_jtag_debug_module_write -> nios2:jtag_debug_module_write
	wire  [31:0] mm_interconnect_0_nios2_jtag_debug_module_writedata;   // mm_interconnect_0:nios2_jtag_debug_module_writedata -> nios2:jtag_debug_module_writedata
	wire         mm_interconnect_0_pio_led_s1_chipselect;               // mm_interconnect_0:pio_led_s1_chipselect -> pio_led:chipselect
	wire  [31:0] mm_interconnect_0_pio_led_s1_readdata;                 // pio_led:readdata -> mm_interconnect_0:pio_led_s1_readdata
	wire   [2:0] mm_interconnect_0_pio_led_s1_address;                  // mm_interconnect_0:pio_led_s1_address -> pio_led:address
	wire         mm_interconnect_0_pio_led_s1_write;                    // mm_interconnect_0:pio_led_s1_write -> pio_led:write_n
	wire  [31:0] mm_interconnect_0_pio_led_s1_writedata;                // mm_interconnect_0:pio_led_s1_writedata -> pio_led:writedata
	wire         mm_interconnect_0_pio_key_s1_chipselect;               // mm_interconnect_0:pio_key_s1_chipselect -> pio_key:chipselect
	wire  [31:0] mm_interconnect_0_pio_key_s1_readdata;                 // pio_key:readdata -> mm_interconnect_0:pio_key_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_key_s1_address;                  // mm_interconnect_0:pio_key_s1_address -> pio_key:address
	wire         mm_interconnect_0_pio_key_s1_write;                    // mm_interconnect_0:pio_key_s1_write -> pio_key:write_n
	wire  [31:0] mm_interconnect_0_pio_key_s1_writedata;                // mm_interconnect_0:pio_key_s1_writedata -> pio_key:writedata
	wire         mm_interconnect_0_pio_reset_s1_chipselect;             // mm_interconnect_0:pio_reset_s1_chipselect -> pio_reset:chipselect
	wire  [31:0] mm_interconnect_0_pio_reset_s1_readdata;               // pio_reset:readdata -> mm_interconnect_0:pio_reset_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_reset_s1_address;                // mm_interconnect_0:pio_reset_s1_address -> pio_reset:address
	wire         mm_interconnect_0_pio_reset_s1_write;                  // mm_interconnect_0:pio_reset_s1_write -> pio_reset:write_n
	wire  [31:0] mm_interconnect_0_pio_reset_s1_writedata;              // mm_interconnect_0:pio_reset_s1_writedata -> pio_reset:writedata
	wire         irq_mapper_receiver0_irq;                              // oc_iic_0:av_irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                              // uart_0:irq -> irq_mapper:receiver1_irq
	wire         irq_mapper_receiver2_irq;                              // pio_key:irq -> irq_mapper:receiver2_irq
	wire  [31:0] nios2_d_irq_irq;                                       // irq_mapper:sender_irq -> nios2:d_irq
	wire         rst_controller_reset_out_reset;                        // rst_controller:reset_out -> [irq_mapper:reset, mm_interconnect_0:nios2_reset_n_reset_bridge_in_reset_reset, nios2:reset_n, oc_iic_0:av_reset, onchip:reset, rst_translator:in_reset, uart_0:reset_n]
	wire         rst_controller_reset_out_reset_req;                    // rst_controller:reset_req -> [nios2:reset_req, onchip:reset_req, rst_translator:reset_req_in]
	wire         rst_controller_001_reset_out_reset;                    // rst_controller_001:reset_out -> [mm_interconnect_0:pio_led_reset_reset_bridge_in_reset_reset, pio_key:reset_n, pio_led:reset_n, pio_reset:reset_n]
	wire         nios2_jtag_debug_module_reset_reset;                   // nios2:jtag_debug_module_resetrequest -> rst_controller_001:reset_in1

	mysystem_nios2 nios2 (
		.clk                                   (clk_clk),                                               //                       clk.clk
		.reset_n                               (~rst_controller_reset_out_reset),                       //                   reset_n.reset_n
		.reset_req                             (rst_controller_reset_out_reset_req),                    //                          .reset_req
		.d_address                             (nios2_data_master_address),                             //               data_master.address
		.d_byteenable                          (nios2_data_master_byteenable),                          //                          .byteenable
		.d_read                                (nios2_data_master_read),                                //                          .read
		.d_readdata                            (nios2_data_master_readdata),                            //                          .readdata
		.d_waitrequest                         (nios2_data_master_waitrequest),                         //                          .waitrequest
		.d_write                               (nios2_data_master_write),                               //                          .write
		.d_writedata                           (nios2_data_master_writedata),                           //                          .writedata
		.jtag_debug_module_debugaccess_to_roms (nios2_data_master_debugaccess),                         //                          .debugaccess
		.i_address                             (nios2_instruction_master_address),                      //        instruction_master.address
		.i_read                                (nios2_instruction_master_read),                         //                          .read
		.i_readdata                            (nios2_instruction_master_readdata),                     //                          .readdata
		.i_waitrequest                         (nios2_instruction_master_waitrequest),                  //                          .waitrequest
		.d_irq                                 (nios2_d_irq_irq),                                       //                     d_irq.irq
		.jtag_debug_module_resetrequest        (nios2_jtag_debug_module_reset_reset),                   //   jtag_debug_module_reset.reset
		.jtag_debug_module_address             (mm_interconnect_0_nios2_jtag_debug_module_address),     //         jtag_debug_module.address
		.jtag_debug_module_byteenable          (mm_interconnect_0_nios2_jtag_debug_module_byteenable),  //                          .byteenable
		.jtag_debug_module_debugaccess         (mm_interconnect_0_nios2_jtag_debug_module_debugaccess), //                          .debugaccess
		.jtag_debug_module_read                (mm_interconnect_0_nios2_jtag_debug_module_read),        //                          .read
		.jtag_debug_module_readdata            (mm_interconnect_0_nios2_jtag_debug_module_readdata),    //                          .readdata
		.jtag_debug_module_waitrequest         (mm_interconnect_0_nios2_jtag_debug_module_waitrequest), //                          .waitrequest
		.jtag_debug_module_write               (mm_interconnect_0_nios2_jtag_debug_module_write),       //                          .write
		.jtag_debug_module_writedata           (mm_interconnect_0_nios2_jtag_debug_module_writedata),   //                          .writedata
		.no_ci_readra                          ()                                                       // custom_instruction_master.readra
	);

	mysystem_onchip onchip (
		.clk        (clk_clk),                                //   clk1.clk
		.address    (mm_interconnect_0_onchip_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),         // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),     //       .reset_req
		.freeze     (1'b0)                                    // (terminated)
	);

	oc_i2c_master oc_iic_0 (
		.av_address       (mm_interconnect_0_oc_iic_0_av_address),     //               av.address
		.av_chipselect    (mm_interconnect_0_oc_iic_0_av_chipselect),  //                 .chipselect
		.av_write         (mm_interconnect_0_oc_iic_0_av_write),       //                 .write
		.av_read          (mm_interconnect_0_oc_iic_0_av_read),        //                 .read
		.av_writedata     (mm_interconnect_0_oc_iic_0_av_writedata),   //                 .writedata
		.av_readdata      (mm_interconnect_0_oc_iic_0_av_readdata),    //                 .readdata
		.av_waitrequest_n (mm_interconnect_0_oc_iic_0_av_waitrequest), //                 .waitrequest_n
		.av_clk           (clk_clk),                                   //       clock_sink.clk
		.av_reset         (rst_controller_reset_out_reset),            //       reset_sink.reset
		.av_irq           (irq_mapper_receiver0_irq),                  // interrupt_sender.irq
		.scl_pad_io       (oc_iic_scl_pad_io),                         //             wire.export
		.sda_pad_io       (oc_iic_sda_pad_io)                          //                 .export
	);

	mysystem_uart_0 uart_0 (
		.clk           (clk_clk),                                   //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address       (mm_interconnect_0_uart_0_s1_address),       //                  s1.address
		.begintransfer (mm_interconnect_0_uart_0_s1_begintransfer), //                    .begintransfer
		.chipselect    (mm_interconnect_0_uart_0_s1_chipselect),    //                    .chipselect
		.read_n        (~mm_interconnect_0_uart_0_s1_read),         //                    .read_n
		.write_n       (~mm_interconnect_0_uart_0_s1_write),        //                    .write_n
		.writedata     (mm_interconnect_0_uart_0_s1_writedata),     //                    .writedata
		.readdata      (mm_interconnect_0_uart_0_s1_readdata),      //                    .readdata
		.rxd           (uart_0_rxd),                                // external_connection.export
		.txd           (uart_0_txd),                                //                    .export
		.irq           (irq_mapper_receiver1_irq)                   //                 irq.irq
	);

	mysystem_pio_led pio_led (
		.clk        (clk_clk),                                 //                 clk.clk
		.reset_n    (~rst_controller_001_reset_out_reset),     //               reset.reset_n
		.address    (mm_interconnect_0_pio_led_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_led_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_led_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_led_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_led_s1_readdata),   //                    .readdata
		.out_port   (pio_led_export)                           // external_connection.export
	);

	mysystem_pio_key pio_key (
		.clk        (clk_clk),                                 //                 clk.clk
		.reset_n    (~rst_controller_001_reset_out_reset),     //               reset.reset_n
		.address    (mm_interconnect_0_pio_key_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_key_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_key_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_key_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_key_s1_readdata),   //                    .readdata
		.in_port    (pio_key_export),                          // external_connection.export
		.irq        (irq_mapper_receiver2_irq)                 //                 irq.irq
	);

	mysystem_pio_reset pio_reset (
		.clk        (clk_clk),                                   //                 clk.clk
		.reset_n    (~rst_controller_001_reset_out_reset),       //               reset.reset_n
		.address    (mm_interconnect_0_pio_reset_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_reset_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_reset_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_reset_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_reset_s1_readdata),   //                    .readdata
		.out_port   (pio_reset_out_export)                       // external_connection.export
	);

	mysystem_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                             (clk_clk),                                               //                           clk_0_clk.clk
		.nios2_reset_n_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                        // nios2_reset_n_reset_bridge_in_reset.reset
		.pio_led_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                    // pio_led_reset_reset_bridge_in_reset.reset
		.nios2_data_master_address                 (nios2_data_master_address),                             //                   nios2_data_master.address
		.nios2_data_master_waitrequest             (nios2_data_master_waitrequest),                         //                                    .waitrequest
		.nios2_data_master_byteenable              (nios2_data_master_byteenable),                          //                                    .byteenable
		.nios2_data_master_read                    (nios2_data_master_read),                                //                                    .read
		.nios2_data_master_readdata                (nios2_data_master_readdata),                            //                                    .readdata
		.nios2_data_master_write                   (nios2_data_master_write),                               //                                    .write
		.nios2_data_master_writedata               (nios2_data_master_writedata),                           //                                    .writedata
		.nios2_data_master_debugaccess             (nios2_data_master_debugaccess),                         //                                    .debugaccess
		.nios2_instruction_master_address          (nios2_instruction_master_address),                      //            nios2_instruction_master.address
		.nios2_instruction_master_waitrequest      (nios2_instruction_master_waitrequest),                  //                                    .waitrequest
		.nios2_instruction_master_read             (nios2_instruction_master_read),                         //                                    .read
		.nios2_instruction_master_readdata         (nios2_instruction_master_readdata),                     //                                    .readdata
		.nios2_jtag_debug_module_address           (mm_interconnect_0_nios2_jtag_debug_module_address),     //             nios2_jtag_debug_module.address
		.nios2_jtag_debug_module_write             (mm_interconnect_0_nios2_jtag_debug_module_write),       //                                    .write
		.nios2_jtag_debug_module_read              (mm_interconnect_0_nios2_jtag_debug_module_read),        //                                    .read
		.nios2_jtag_debug_module_readdata          (mm_interconnect_0_nios2_jtag_debug_module_readdata),    //                                    .readdata
		.nios2_jtag_debug_module_writedata         (mm_interconnect_0_nios2_jtag_debug_module_writedata),   //                                    .writedata
		.nios2_jtag_debug_module_byteenable        (mm_interconnect_0_nios2_jtag_debug_module_byteenable),  //                                    .byteenable
		.nios2_jtag_debug_module_waitrequest       (mm_interconnect_0_nios2_jtag_debug_module_waitrequest), //                                    .waitrequest
		.nios2_jtag_debug_module_debugaccess       (mm_interconnect_0_nios2_jtag_debug_module_debugaccess), //                                    .debugaccess
		.oc_iic_0_av_address                       (mm_interconnect_0_oc_iic_0_av_address),                 //                         oc_iic_0_av.address
		.oc_iic_0_av_write                         (mm_interconnect_0_oc_iic_0_av_write),                   //                                    .write
		.oc_iic_0_av_read                          (mm_interconnect_0_oc_iic_0_av_read),                    //                                    .read
		.oc_iic_0_av_readdata                      (mm_interconnect_0_oc_iic_0_av_readdata),                //                                    .readdata
		.oc_iic_0_av_writedata                     (mm_interconnect_0_oc_iic_0_av_writedata),               //                                    .writedata
		.oc_iic_0_av_waitrequest                   (~mm_interconnect_0_oc_iic_0_av_waitrequest),            //                                    .waitrequest
		.oc_iic_0_av_chipselect                    (mm_interconnect_0_oc_iic_0_av_chipselect),              //                                    .chipselect
		.onchip_s1_address                         (mm_interconnect_0_onchip_s1_address),                   //                           onchip_s1.address
		.onchip_s1_write                           (mm_interconnect_0_onchip_s1_write),                     //                                    .write
		.onchip_s1_readdata                        (mm_interconnect_0_onchip_s1_readdata),                  //                                    .readdata
		.onchip_s1_writedata                       (mm_interconnect_0_onchip_s1_writedata),                 //                                    .writedata
		.onchip_s1_byteenable                      (mm_interconnect_0_onchip_s1_byteenable),                //                                    .byteenable
		.onchip_s1_chipselect                      (mm_interconnect_0_onchip_s1_chipselect),                //                                    .chipselect
		.onchip_s1_clken                           (mm_interconnect_0_onchip_s1_clken),                     //                                    .clken
		.pio_key_s1_address                        (mm_interconnect_0_pio_key_s1_address),                  //                          pio_key_s1.address
		.pio_key_s1_write                          (mm_interconnect_0_pio_key_s1_write),                    //                                    .write
		.pio_key_s1_readdata                       (mm_interconnect_0_pio_key_s1_readdata),                 //                                    .readdata
		.pio_key_s1_writedata                      (mm_interconnect_0_pio_key_s1_writedata),                //                                    .writedata
		.pio_key_s1_chipselect                     (mm_interconnect_0_pio_key_s1_chipselect),               //                                    .chipselect
		.pio_led_s1_address                        (mm_interconnect_0_pio_led_s1_address),                  //                          pio_led_s1.address
		.pio_led_s1_write                          (mm_interconnect_0_pio_led_s1_write),                    //                                    .write
		.pio_led_s1_readdata                       (mm_interconnect_0_pio_led_s1_readdata),                 //                                    .readdata
		.pio_led_s1_writedata                      (mm_interconnect_0_pio_led_s1_writedata),                //                                    .writedata
		.pio_led_s1_chipselect                     (mm_interconnect_0_pio_led_s1_chipselect),               //                                    .chipselect
		.pio_reset_s1_address                      (mm_interconnect_0_pio_reset_s1_address),                //                        pio_reset_s1.address
		.pio_reset_s1_write                        (mm_interconnect_0_pio_reset_s1_write),                  //                                    .write
		.pio_reset_s1_readdata                     (mm_interconnect_0_pio_reset_s1_readdata),               //                                    .readdata
		.pio_reset_s1_writedata                    (mm_interconnect_0_pio_reset_s1_writedata),              //                                    .writedata
		.pio_reset_s1_chipselect                   (mm_interconnect_0_pio_reset_s1_chipselect),             //                                    .chipselect
		.uart_0_s1_address                         (mm_interconnect_0_uart_0_s1_address),                   //                           uart_0_s1.address
		.uart_0_s1_write                           (mm_interconnect_0_uart_0_s1_write),                     //                                    .write
		.uart_0_s1_read                            (mm_interconnect_0_uart_0_s1_read),                      //                                    .read
		.uart_0_s1_readdata                        (mm_interconnect_0_uart_0_s1_readdata),                  //                                    .readdata
		.uart_0_s1_writedata                       (mm_interconnect_0_uart_0_s1_writedata),                 //                                    .writedata
		.uart_0_s1_begintransfer                   (mm_interconnect_0_uart_0_s1_begintransfer),             //                                    .begintransfer
		.uart_0_s1_chipselect                      (mm_interconnect_0_uart_0_s1_chipselect)                 //                                    .chipselect
	);

	mysystem_irq_mapper irq_mapper (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),       // receiver2.irq
		.sender_irq    (nios2_d_irq_irq)                 //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                      // reset_in0.reset
		.reset_in1      (nios2_jtag_debug_module_reset_reset), // reset_in1.reset
		.clk            (clk_clk),                             //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),  // reset_out.reset
		.reset_req      (),                                    // (terminated)
		.reset_req_in0  (1'b0),                                // (terminated)
		.reset_req_in1  (1'b0),                                // (terminated)
		.reset_in2      (1'b0),                                // (terminated)
		.reset_req_in2  (1'b0),                                // (terminated)
		.reset_in3      (1'b0),                                // (terminated)
		.reset_req_in3  (1'b0),                                // (terminated)
		.reset_in4      (1'b0),                                // (terminated)
		.reset_req_in4  (1'b0),                                // (terminated)
		.reset_in5      (1'b0),                                // (terminated)
		.reset_req_in5  (1'b0),                                // (terminated)
		.reset_in6      (1'b0),                                // (terminated)
		.reset_req_in6  (1'b0),                                // (terminated)
		.reset_in7      (1'b0),                                // (terminated)
		.reset_req_in7  (1'b0),                                // (terminated)
		.reset_in8      (1'b0),                                // (terminated)
		.reset_req_in8  (1'b0),                                // (terminated)
		.reset_in9      (1'b0),                                // (terminated)
		.reset_req_in9  (1'b0),                                // (terminated)
		.reset_in10     (1'b0),                                // (terminated)
		.reset_req_in10 (1'b0),                                // (terminated)
		.reset_in11     (1'b0),                                // (terminated)
		.reset_req_in11 (1'b0),                                // (terminated)
		.reset_in12     (1'b0),                                // (terminated)
		.reset_req_in12 (1'b0),                                // (terminated)
		.reset_in13     (1'b0),                                // (terminated)
		.reset_req_in13 (1'b0),                                // (terminated)
		.reset_in14     (1'b0),                                // (terminated)
		.reset_req_in14 (1'b0),                                // (terminated)
		.reset_in15     (1'b0),                                // (terminated)
		.reset_req_in15 (1'b0)                                 // (terminated)
	);

endmodule
